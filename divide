int divide(struct BigNum *object, struct BigNum *object2, struct BigNum *ob     ject3, struct BigNum *object4, struct BigNum *object5, struct BigNum *objec     t6, int *d_total)
 {
    int i, j, k, l;
     int a, b, c, d, e;
     a = object->sign;
     b = object2->sign;
     c = d = 0; e = 0;
     j = k = l = 0;
     object->sign = 1; object2->sign = 1;
     object3->i_total_digit = object3->d_total_digit = 0;
     *object6 = *object;
     *object4 = *object2;
     if (object->i_total_digit == 1 && object->i_digit[0] == 0)
     {
         d++;
         object->i_digit[0] = object->d_digit[object->d_total_digit - 1];
         for (i = 0; i<object->d_total_digit; i++)
         {
             object->d_digit[object->d_total_digit - 1 - i] = object->d_digi     t[object->d_total_digit - 1 - i];
         }
         object->d_digit[0] = 0;
     }
     if (object2->i_total_digit == 1 && object2->i_digit[0] == 0)
     {
         for (i = 0; i<100; i++)
         {
             if (object4->d_digit[object->d_total_digit - 1 - i] == 0)
             {
                 e++;
             }
             else
             {
                 break;
             }
         }
         object4->i_digit[0] = object4->d_digit[object4->d_total_digit - 1 -      e];
         for (i = 0; i<object4->d_total_digit; i++)
         for (i = 0; i<object4->d_total_digit; i++)
         {
             object4->d_digit[object4->d_total_digit - 1 - i] = object4->d_d     igit[object4->d_total_digit - 1 - i - e];
         }
         for (i = 0; i<e; i++)
         {
             object4->d_digit[i] = 0;
         }
         if (e == 0)
         {
             object4->d_digit[0] = 0;
             d--;
         }
         d = d - e;
     }
     for (i = 0; i<object4->i_total_digit; i++)
     {
         object4->i_digit[object->i_total_digit - 1 - i] = object4->i_digit[     object4->i_total_digit - 1 - i];
     }
     for (i = 0; i<object->i_total_digit - object4->i_total_digit; i++)
     {
         if (object4->d_digit[object4->d_total_digit - 1 - i] >= 0 && object     4->d_digit[object4->d_total_digit - 1 - i]<10)
         {
             object4->i_digit[object->i_total_digit - object4->i_total_digit      - 1 - i] = object4->d_digit[object4->d_total_digit - 1 - i];
         }
         else
         {
             object4->i_digit[object->i_total_digit - object4->i_total_digit      - 1 - i] = 0;
         }
     }
     for (i = 0; i<object->i_total_digit - object4->i_total_digit; i++)
     {
         object4->d_digit[object4->d_total_digit - 1 - i] = 0;
     }
     object4->d_total_digit = object2->d_total_digit - object->i_total_digit      + object2->i_total_digit;
     object4->i_total_digit = object->i_total_digit;
     for (;;)
     {
         *object5 = *object;
         if (object->d_total_digit>object4->d_total_digit)
         {
             for (i = object->d_total_digit - object4->d_total_digit; i<obje     ct->d_total_digit; i++)
             {
                 object->d_digit[i] = object->d_digit[i] - object4->d_digit[     i - object->d_total_digit + object4->d_total_digit];
             }
         }
         else
         {

             for (i = 0; i<object4->d_total_digit - object->d_total_digit; i     ++)
             {
                 object->d_digit[i] = 0 - object4->d_digit[i];
             }
             for (i = object4->d_total_digit - object->d_total_digit; i<obje     ct4->d_total_digit; i++)
             {
                 object->d_digit[i] = object->d_digit[i] - object4->d_digit[     i - object4->d_total_digit + object->d_total_digit];
             }
             object->d_total_digit = object4->d_total_digit;
         }
         for (i = 0; i<object->d_total_digit; i++)
         {
             if (object->d_digit[i]<0 && i != object->d_total_digit - 1)
             {
                 object->d_digit[i] = object->d_digit[i] + 10;
                 object->d_digit[i + 1]--;
             }
             else if (object->d_digit[i]<0 && i == object->d_total_digit - 1     )
             {
                 object->d_digit[i] = object->d_digit[i] + 10;
                 object->i_digit[0]--;
             }
         }
         for (i = 0; i<object->i_total_digit; i++)
         {
             object->i_digit[i] = object->i_digit[i] - object4->i_digit[i];
         }
         for (i = 0; i<object->i_total_digit; i++)
         {
             if (object->i_digit[i]<0 && i != object->i_total_digit - 1)
             {
                 object->i_digit[i] = object->i_digit[i] + 10;
                 object->i_digit[i + 1]--;
             }
             else if (object->i_digit[i]<0 && i == object->i_total_digit - 1     )
             {
                 if (object->i_digit[i + 1]>0 && object->i_digit[i + 1]<10)
                 {
                     object->i_digit[i] = object->i_digit[i] + 10;
                     object->i_digit[i + 1]--;
                 }
             }
         }
         c++;
         if (object->i_digit[object->i_total_digit - 1]<0)
         {
             *object = *object5;
             if (d <= object->i_total_digit - object2->i_total_digit)
           {
                 object3->i_digit[object->i_total_digit - object2->i_total_d     igit - d] = c - 1;
                 object3->i_total_digit++;
             }
             else
             {
                 object3->d_digit[*d_total - d + object->i_total_digit - obj     ect2->i_total_digit] = c - 1;
                 object3->d_total_digit++;
             }
             for (i = 0; i<object->i_total_digit; i++)
             {
                 object->i_digit[object->i_total_digit - i] = object->i_digi     t[object->i_total_digit - 1 - i];
             }
             if (object->d_digit[object->d_total_digit - 1] >= 0 && object->     d_digit[object->d_total_digit - 1]<10)
             {
                 object->i_digit[0] = object->d_digit[object->d_total_digit      - 1];
             }
             else
             {
                 object->i_digit[0] = 0;
             }
             for (i = 0; i<object->d_total_digit - 1; i++)
             {
                 object->d_digit[object->d_total_digit - 1 - i] = object->d_     digit[object->d_total_digit - 2 - i];
             }
             object->d_digit[0] = 0;
             d++;
             c = 0;
         }
         if (d - object->i_total_digit + object2->i_total_digit>*d_total)
         {
             break;
         }
     }
     for (i = 0; i<object3->d_total_digit; i++)
     {
         if (object3->d_digit[i] == 0)
         {
             l++;
         }
         else
         {
             break;
         }
     }
     for (i = 0; i<object3->d_total_digit; i++)
     {
         object3->d_digit[i] = object3->d_digit[i + l];
     }
     object3->d_total_digit = object3->d_total_digit - l;
     l = 0;
     for (i = 0; i<object3->i_total_digit; i++)
     {
         if (object3->i_diit[object3->i_total_digit - 1 - i] == 0)
         {
             l++;
         }
         else
         {
             break;
         }
     }
     object3->i_total_digit = object3->i_total_digit - l;
     l = 0;
     object3->sign = a*b;
     *object = *object6;
     return 0;
 }
